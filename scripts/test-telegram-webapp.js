#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram WebApp
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API –∫–ª—é—á –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
 */

import https from 'https';
import http from 'http';

const BASE_URL = 'https://projects.inetskills.ru';
const API_READONLY_KEY = 'YdbX9WekeVLzRDbwrgeR+90W2rFE0Q60KzBwg7aP/P0=';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const isHttps = url.startsWith('https://');
        const client = isHttps ? https : http;
        
        const requestOptions = {
            method: options.method || 'GET',
            headers: {
                'User-Agent': 'TelegramWebAppTest/1.0',
                ...options.headers
            },
            timeout: 10000
        };

        const req = client.request(url, requestOptions, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(data);
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        data: jsonData
                    });
                } catch (error) {
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        data: data
                    });
                }
            });
        });

        req.on('error', reject);
        req.on('timeout', () => {
            req.destroy();
            reject(new Error('Request timeout'));
        });

        if (options.body) {
            req.write(options.body);
        }
        
        req.end();
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è API –∫–ª—é—á–∞ –∏–∑ HTML
async function getApiKeyFromHtml() {
    try {
        const response = await makeRequest(`${BASE_URL}/network`);
        
        if (response.statusCode === 200) {
            const html = response.data;
            const match = html.match(/<meta name="api-readonly-key" content="([^"]+)">/);
            
            if (match) {
                return match[1];
            } else {
                throw new Error('API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML');
            }
        } else {
            throw new Error(`HTTP ${response.statusCode}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è HTML:', error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints
async function testApiEndpoints(apiKey) {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...');
    
    const endpoints = [
        { path: '/api/readonly/referrals/tree', name: '–î–µ—Ä–µ–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤' },
        { path: '/api/readonly/referrals/activity-stats', name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' }
    ];
    
    const results = [];
    
    for (const endpoint of endpoints) {
        const startTime = Date.now();
        try {
            const response = await makeRequest(`${BASE_URL}${endpoint.path}`, {
                headers: { 'x-api-key': apiKey }
            });
            const responseTime = Date.now() - startTime;
            
            const success = response.statusCode === 200;
            results.push({
                endpoint: endpoint.name,
                status: response.statusCode,
                responseTime,
                success
            });
            
            const status = success ? '‚úÖ' : '‚ùå';
            console.log(`${status} ${endpoint.name}: ${response.statusCode} (${responseTime}ms)`);
            
            if (!success) {
                console.log(`   –û—à–∏–±–∫–∞: ${response.data}`);
            }
        } catch (error) {
            const responseTime = Date.now() - startTime;
            results.push({
                endpoint: endpoint.name,
                status: 'ERROR',
                responseTime,
                success: false,
                error: error.message
            });
            
            console.log(`‚ùå ${endpoint.name}: ERROR (${responseTime}ms) - ${error.message}`);
        }
    }
    
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ API –∫–ª—é—á–∞
async function testWithoutApiKey() {
    console.log('\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ API –∫–ª—é—á–∞ (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 401)...');
    
    try {
        const response = await makeRequest(`${BASE_URL}/api/readonly/referrals/tree`);
        
        if (response.statusCode === 401) {
            console.log('‚úÖ –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: 401 Unauthorized');
            return true;
        } else {
            console.log(`‚ùå –ó–∞—â–∏—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${response.statusCode}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã: ${error.message}`);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM WEBAPP');
    console.log('===============================');
    console.log(`üåê –°–µ—Ä–≤–µ—Ä: ${BASE_URL}`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
    console.log('');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ HTML
    console.log('üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ HTML...');
    const apiKeyFromHtml = await getApiKeyFromHtml();
    
    if (!apiKeyFromHtml) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ HTML');
        process.exit(1);
    }
    
    console.log(`‚úÖ API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω: ${apiKeyFromHtml.substring(0, 10)}...`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∫–ª—é—á
    if (apiKeyFromHtml === API_READONLY_KEY) {
        console.log('‚úÖ API –∫–ª—é—á —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º');
    } else {
        console.log('‚ö†Ô∏è API –∫–ª—é—á –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º');
        console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π: ${API_READONLY_KEY.substring(0, 10)}...`);
        console.log(`   –ü–æ–ª—É—á–µ–Ω–Ω—ã–π: ${apiKeyFromHtml.substring(0, 10)}...`);
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
    const results = await testApiEndpoints(apiKeyFromHtml);
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É
    const protectionWorks = await testWithoutApiKey();
    
    // 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('==========================');
    
    const successCount = results.filter(r => r.success).length;
    const totalCount = results.length;
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successCount}/${totalCount}`);
    console.log(`üîí –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${protectionWorks ? '–î–∞' : '–ù–µ—Ç'}`);
    
    if (successCount === totalCount && protectionWorks) {
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Telegram WebApp –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        console.log('\nüí° –ï—Å–ª–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –≤—Å–µ –µ—â–µ 401 –æ—à–∏–±–∫–∏:');
        console.log('   1. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ (Ctrl+Shift+R)');
        console.log('   2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ');
        console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏ JavaScript');
    } else {
        console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
        results.forEach(result => {
            if (!result.success) {
                console.log(`   - ${result.endpoint}: ${result.error || result.status}`);
            }
        });
        if (!protectionWorks) {
            console.log('   - –ó–∞—â–∏—Ç–∞ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        }
    }
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch(error => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

export { main as testTelegramWebApp };
