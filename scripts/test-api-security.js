#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ rate limiting
 */

import https from 'https';
import http from 'http';
import dotenv from 'dotenv';

dotenv.config();

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';
const API_SECRET_KEY = process.env.API_SECRET_KEY || '06ediHycd1Vi1MY4l/DuV5FKrY5ocu8l0ru3Q1zXq5E=';

class APISecurityTester {
    constructor() {
        this.testResults = {
            passed: 0,
            failed: 0,
            total: 0
        };
    }

    logTest(testName, status, message = '') {
        const statusIcon = status === 'PASS' ? '‚úÖ' : '‚ùå';
        console.log(`${statusIcon} ${testName}: ${status} ${message}`);
        
        this.testResults.total++;
        if (status === 'PASS') {
            this.testResults.passed++;
        } else {
            this.testResults.failed++;
        }
    }

    async makeRequest(url, options = {}) {
        return new Promise((resolve) => {
            const urlObj = new URL(url);
            const isHttps = urlObj.protocol === 'https:';
            const client = isHttps ? https : http;
            
            const requestOptions = {
                hostname: urlObj.hostname,
                port: urlObj.port || (isHttps ? 443 : 80),
                path: urlObj.pathname + urlObj.search,
                method: options.method || 'GET',
                headers: {
                    'User-Agent': 'API-Security-Tester/1.0',
                    ...options.headers
                },
                timeout: 10000
            };
            
            const req = client.request(requestOptions, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                    data += chunk;
                });
                
                res.on('end', () => {
                    let jsonData;
                    try {
                        jsonData = JSON.parse(data);
                    } catch (e) {
                        jsonData = { raw: data };
                    }
                    
                    resolve({
                        status: res.statusCode,
                        headers: res.headers,
                        data: jsonData
                    });
                });
            });
            
            req.on('error', (error) => {
                resolve({
                    status: 0,
                    error: error.message,
                    data: null
                });
            });
            
            req.on('timeout', () => {
                req.destroy();
                resolve({
                    status: 0,
                    error: 'Request timeout',
                    data: null
                });
            });
            
            if (options.body) {
                req.write(options.body);
            }
            
            req.end();
        });
    }

    async testUnauthorizedAccess() {
        console.log('\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞...');
        
        // –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –±–µ–∑ API –∫–ª—é—á–∞
        const response1 = await this.makeRequest(`${API_BASE_URL}/api/referrals/tree`);
        if (response1.status === 401) {
            this.logTest('–ó–∞–ø—Ä–æ—Å –±–µ–∑ API –∫–ª—é—á–∞', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response1.status}`);
        } else {
            this.logTest('–ó–∞–ø—Ä–æ—Å –±–µ–∑ API –∫–ª—é—á–∞', 'FAIL', `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω: ${response1.status}`);
        }

        // –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º
        const response2 = await this.makeRequest(`${API_BASE_URL}/api/referrals/tree`, {
            headers: { 'x-api-key': 'wrong-key' }
        });
        if (response2.status === 401) {
            this.logTest('–ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
        } else {
            this.logTest('–ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º', 'FAIL', `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω: ${response2.status}`);
        }
    }

    async testAuthorizedAccess() {
        console.log('\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞...');
        
        // –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        const response1 = await this.makeRequest(`${API_BASE_URL}/api/referrals/tree`, {
            headers: { 'x-api-key': API_SECRET_KEY }
        });
        if (response1.status === 200) {
            this.logTest('–ó–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º (–∑–∞–≥–æ–ª–æ–≤–æ–∫)', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response1.status}`);
        } else {
            this.logTest('–ó–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º (–∑–∞–≥–æ–ª–æ–≤–æ–∫)', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response1.status}`);
        }

        // –¢–µ—Å—Ç 4: –ó–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
        const response2 = await this.makeRequest(`${API_BASE_URL}/api/referrals/tree?api_key=${API_SECRET_KEY}`);
        if (response2.status === 200) {
            this.logTest('–ó–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º (query)', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
        } else {
            this.logTest('–ó–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º (query)', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
        }
    }

    async testWriteOperations() {
        console.log('\n‚úèÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏...');
        
        // –¢–µ—Å—Ç 5: POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ API –∫–ª—é—á–∞
        const response1 = await this.makeRequest(`${API_BASE_URL}/api/referals`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                referalId: 'test-user-123',
                referalName: 'Test User',
                referalPhone: '+1234567890'
            })
        });
        if (response1.status === 401) {
            this.logTest('POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ API –∫–ª—é—á–∞', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response1.status}`);
        } else {
            this.logTest('POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ API –∫–ª—é—á–∞', 'FAIL', `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω: ${response1.status}`);
        }

        // –¢–µ—Å—Ç 6: POST –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º
        const response2 = await this.makeRequest(`${API_BASE_URL}/api/referals`, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'x-api-key': API_SECRET_KEY
            },
            body: JSON.stringify({
                referalId: 'test-user-456',
                referalName: 'Test User 2',
                referalPhone: '+1234567891'
            })
        });
        if (response2.status === 200 || response2.status === 201) {
            this.logTest('POST –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
        } else {
            this.logTest('POST –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
        }
    }

    async testRateLimiting() {
        console.log('\n‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...');
        
        const requests = [];
        const maxRequests = 10;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        for (let i = 0; i < maxRequests; i++) {
            requests.push(
                this.makeRequest(`${API_BASE_URL}/api/referrals/tree`, {
                    headers: { 'x-api-key': API_SECRET_KEY }
                })
            );
        }
        
        const responses = await Promise.all(requests);
        const successCount = responses.filter(r => r.status === 200).length;
        const rateLimitedCount = responses.filter(r => r.status === 429).length;
        
        if (successCount > 0) {
            this.logTest('Rate limiting - —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', 'PASS', `–£—Å–ø–µ—à–Ω–æ: ${successCount}/${maxRequests}`);
        } else {
            this.logTest('Rate limiting - —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', 'FAIL', '–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
        }
        
        if (rateLimitedCount > 0) {
            this.logTest('Rate limiting - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ', 'PASS', `–û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ: ${rateLimitedCount}/${maxRequests}`);
        } else {
            this.logTest('Rate limiting - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ', 'INFO', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)');
        }
    }

    async testWebInterfaceAccess() {
        console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É...');
        
        // –¢–µ—Å—Ç 7: –î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –±–µ–∑ API –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
        const response1 = await this.makeRequest(`${API_BASE_URL}/network`);
        if (response1.status === 200) {
            this.logTest('–î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response1.status}`);
        } else {
            this.logTest('–î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response1.status}`);
        }

        // –¢–µ—Å—Ç 8: Health check –±–µ–∑ API –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
        const response2 = await this.makeRequest(`${API_BASE_URL}/health`);
        if (response2.status === 200) {
            this.logTest('Health check endpoint', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
        } else {
            this.logTest('Health check endpoint', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
        }
    }

    async runAllTests() {
        console.log('üõ°Ô∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API...');
        console.log(`API Base URL: ${API_BASE_URL}`);
        console.log(`API Secret Key: ${API_SECRET_KEY.substring(0, 8)}...`);
        
        try {
            await this.testUnauthorizedAccess();
            await this.testAuthorizedAccess();
            await this.testWriteOperations();
            await this.testRateLimiting();
            await this.testWebInterfaceAccess();
            
            this.printSummary();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
        }
    }

    printSummary() {
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failed}`);
        console.log(`üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.total}`);
        
        const successRate = ((this.testResults.passed / this.testResults.total) * 100).toFixed(1);
        console.log(`üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
        
        if (this.testResults.failed === 0) {
            console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é API!');
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const tester = new APISecurityTester();
tester.runAllTests();
