#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç readonly endpoint –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ JavaScript —Å readonly API
 */

import https from 'https';
import http from 'http';

const API_READONLY_KEY = 'ZDd1/oQLS2BxsFhfA7f012ArXCr0fByy6jlH1JXH7bs=';
const BASE_URL = 'https://projects.inetskills.ru';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const isHttps = url.startsWith('https://');
        const client = isHttps ? https : http;
        
        const requestOptions = {
            method: options.method || 'GET',
            headers: {
                'User-Agent': 'ReadonlyEndpointTest/1.0',
                ...options.headers
            },
            timeout: 10000
        };

        const req = client.request(url, requestOptions, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                resolve({
                    statusCode: res.statusCode,
                    headers: res.headers,
                    data: data
                });
            });
        });

        req.on('error', reject);
        req.on('timeout', () => {
            req.destroy();
            reject(new Error('Request timeout'));
        });

        if (options.body) {
            req.write(options.body);
        }
        
        req.end();
    });
}

// –¢–µ—Å—Ç 1: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å /network
async function testWebInterface() {
    console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ /network...');
    
    try {
        const response = await makeRequest(`${BASE_URL}/network`);
        
        if (response.statusCode === 200) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HTML —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JavaScript
            if (response.data.includes('/api/readonly/referrals/tree')) {
                console.log('‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç readonly API');
                return true;
            } else {
                console.log('‚ö†Ô∏è –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ JavaScript –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω');
                return false;
            }
        } else {
            console.log(`‚ùå –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.statusCode}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: ${error.message}`);
        return false;
    }
}

// –¢–µ—Å—Ç 2: Readonly API –¥–ª—è –¥–µ—Ä–µ–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async function testReadonlyTreeAPI() {
    console.log('üå≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ readonly API –¥–ª—è –¥–µ—Ä–µ–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...');
    
    try {
        const response = await makeRequest(`${BASE_URL}/api/readonly/referrals/tree`, {
            headers: {
                'x-api-key': API_READONLY_KEY
            }
        });
        
        if (response.statusCode === 200) {
            const data = JSON.parse(response.data);
            if (data.status && data.data) {
                console.log('‚úÖ Readonly API –¥–ª—è –¥–µ—Ä–µ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
                console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${data.data.length}`);
                return true;
            } else {
                console.log('‚ö†Ô∏è API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
                return false;
            }
        } else {
            console.log(`‚ùå Readonly API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.statusCode}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ readonly API: ${error.message}`);
        return false;
    }
}

// –¢–µ—Å—Ç 3: Readonly API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function testReadonlyStatsAPI() {
    console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ readonly API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    
    try {
        const response = await makeRequest(`${BASE_URL}/api/readonly/referrals/activity-stats`, {
            headers: {
                'x-api-key': API_READONLY_KEY
            }
        });
        
        if (response.statusCode === 200) {
            const data = JSON.parse(response.data);
            if (data.status && data.data) {
                console.log('‚úÖ Readonly API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
                console.log(`   üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${data.data.active}, –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${data.data.inactive}`);
                return true;
            } else {
                console.log('‚ö†Ô∏è API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
                return false;
            }
        } else {
            console.log(`‚ùå Readonly API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.statusCode}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ readonly API: ${error.message}`);
        return false;
    }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã readonly API
async function testReadonlyAPISecurity() {
    console.log('üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã readonly API...');
    
    try {
        // –¢–µ—Å—Ç –±–µ–∑ API –∫–ª—é—á–∞
        const responseNoKey = await makeRequest(`${BASE_URL}/api/readonly/referrals/tree`);
        
        if (responseNoKey.statusCode === 401) {
            console.log('‚úÖ Readonly API –∑–∞—â–∏—â–µ–Ω (–±–µ–∑ –∫–ª—é—á–∞)');
        } else {
            console.log(`‚ùå Readonly API –Ω–µ –∑–∞—â–∏—â–µ–Ω: ${responseNoKey.statusCode}`);
            return false;
        }
        
        // –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º API –∫–ª—é—á–æ–º
        const responseWrongKey = await makeRequest(`${BASE_URL}/api/readonly/referrals/tree`, {
            headers: {
                'x-api-key': 'wrong-key'
            }
        });
        
        if (responseWrongKey.statusCode === 401) {
            console.log('‚úÖ Readonly API –∑–∞—â–∏—â–µ–Ω (–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á)');
            return true;
        } else {
            console.log(`‚ùå Readonly API –Ω–µ –∑–∞—â–∏—â–µ–Ω –æ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–ª—é—á–∞: ${responseWrongKey.statusCode}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã: ${error.message}`);
        return false;
    }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function testUserSpecificEndpoint() {
    console.log('üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const treeResponse = await makeRequest(`${BASE_URL}/api/readonly/referrals/tree`, {
            headers: {
                'x-api-key': API_READONLY_KEY
            }
        });
        
        if (treeResponse.statusCode === 200) {
            const treeData = JSON.parse(treeResponse.data);
            if (treeData.status && treeData.data && treeData.data.length > 0) {
                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
                const firstReferral = treeData.data[0];
                const userId = firstReferral.referal_id;
                
                console.log(`   üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${userId}`);
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userResponse = await makeRequest(`${BASE_URL}/api/readonly/referrals/${userId}/tree`, {
                    headers: {
                        'x-api-key': API_READONLY_KEY
                    }
                });
                
                if (userResponse.statusCode === 200) {
                    const userData = JSON.parse(userResponse.data);
                    if (userData.status && userData.data) {
                        console.log('‚úÖ Endpoint –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
                        console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.data.length}`);
                        return true;
                    } else {
                        console.log('‚ö†Ô∏è Endpoint –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
                        return false;
                    }
                } else {
                    console.log(`‚ùå Endpoint –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${userResponse.statusCode}`);
                    return false;
                }
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                return false;
            }
        } else {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return false;
        }
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï READONLY ENDPOINT');
    console.log('=====================================');
    console.log(`üîë API Readonly Key: ${API_READONLY_KEY.substring(0, 20)}...`);
    console.log(`üåê Base URL: ${BASE_URL}`);
    console.log('');

    const tests = [
        { name: '–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å /network', fn: testWebInterface },
        { name: 'Readonly API –¥–ª—è –¥–µ—Ä–µ–≤–∞', fn: testReadonlyTreeAPI },
        { name: 'Readonly API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', fn: testReadonlyStatsAPI },
        { name: '–ó–∞—â–∏—Ç–∞ readonly API', fn: testReadonlyAPISecurity },
        { name: 'Endpoint –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', fn: testUserSpecificEndpoint }
    ];

    let passed = 0;
    let failed = 0;

    for (const test of tests) {
        try {
            const result = await test.fn();
            if (result) {
                passed++;
            } else {
                failed++;
            }
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ "${test.name}": ${error.message}`);
            failed++;
        }
        console.log('');
    }

    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('==========================');
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
    console.log(`üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${tests.length}`);
    console.log(`üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / tests.length) * 100)}%`);

    if (failed === 0) {
        console.log('');
        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        console.log('‚úÖ Readonly endpoint –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω');
    } else {
        console.log('');
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å readonly endpoint');
        console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    }

    return failed === 0;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
    runTests().then(success => {
        process.exit(success ? 0 : 1);
    }).catch(error => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

export { runTests };