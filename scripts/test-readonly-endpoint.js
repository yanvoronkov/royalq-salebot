#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç endpoint —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */

import http from 'http';
import dotenv from 'dotenv';

dotenv.config();

const SERVER_URL = 'http://localhost:3000';
const API_READONLY_KEY = process.env.API_READONLY_KEY || 'ZDd1/oQLS2BxsFhfA7f012ArXCr0fByy6jlH1JXH7bs=';

class ReadonlyEndpointTester {
	constructor() {
		this.testResults = {
			passed: 0,
			failed: 0,
			total: 0
		};
	}

	logTest(testName, status, message = '') {
		const statusIcon = status === 'PASS' ? '‚úÖ' : '‚ùå';
		console.log(`${statusIcon} ${testName}: ${status} ${message}`);

		this.testResults.total++;
		if (status === 'PASS') {
			this.testResults.passed++;
		} else {
			this.testResults.failed++;
		}
	}

	async makeRequest(path, options = {}) {
		return new Promise((resolve) => {
			const requestOptions = {
				hostname: 'localhost',
				port: 3000,
				path: path,
				method: options.method || 'GET',
				headers: {
					'User-Agent': 'Readonly-Tester/1.0',
					...options.headers
				},
				timeout: 5000
			};

			const req = http.request(requestOptions, (res) => {
				let data = '';

				res.on('data', (chunk) => {
					data += chunk;
				});

				res.on('end', () => {
					resolve({
						status: res.statusCode,
						headers: res.headers,
						data: data
					});
				});
			});

			req.on('error', (error) => {
				resolve({
					status: 0,
					error: error.message,
					data: null
				});
			});

			req.on('timeout', () => {
				req.destroy();
				resolve({
					status: 0,
					error: 'Request timeout',
					data: null
				});
			});

			if (options.body) {
				req.write(options.body);
			}

			req.end();
		});
	}

	async testReadonlyWebInterface() {
		console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è...');

		// –¢–µ—Å—Ç 1: –ë–µ–∑ –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
		const response1 = await this.makeRequest('/readonly');
		if (response1.status === 401) {
			this.logTest('–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ –∫–ª—é—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response1.status}`);
		} else {
			this.logTest('–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ –∫–ª—é—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'FAIL', `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω: ${response1.status}`);
		}

		// –¢–µ—Å—Ç 2: –° –∫–ª—é—á–æ–º (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
		const response2 = await this.makeRequest('/readonly', {
			headers: { 'x-api-key': API_READONLY_KEY }
		});
		if (response2.status === 200) {
			this.logTest('–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫–ª—é—á–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
		} else {
			this.logTest('–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫–ª—é—á–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
		}
	}

	async testReadonlyAPI() {
		console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è...');

		const endpoints = [
			'/api/readonly/referrals/tree',
			'/api/readonly/referrals/activity-stats'
		];

		for (const endpoint of endpoints) {
			// –ë–µ–∑ –∫–ª—é—á–∞
			const response1 = await this.makeRequest(endpoint);
			if (response1.status === 401) {
				this.logTest(`${endpoint} –±–µ–∑ –∫–ª—é—á–∞`, 'PASS', `–°—Ç–∞—Ç—É—Å: ${response1.status}`);
			} else {
				this.logTest(`${endpoint} –±–µ–∑ –∫–ª—é—á–∞`, 'FAIL', `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω: ${response1.status}`);
			}

			// –° –∫–ª—é—á–æ–º
			const response2 = await this.makeRequest(endpoint, {
				headers: { 'x-api-key': API_READONLY_KEY }
			});
			if (response2.status === 200) {
				this.logTest(`${endpoint} —Å –∫–ª—é—á–æ–º`, 'PASS', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
			} else {
				this.logTest(`${endpoint} —Å –∫–ª—é—á–æ–º`, 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
			}
		}
	}

	async testMainAPIStillProtected() {
		console.log('\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API (–¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –∑–∞—â–∏—â–µ–Ω–Ω—ã–º)...');

		// –¢–µ—Å—Ç: –û—Å–Ω–æ–≤–Ω–æ–π API –¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
		const response = await this.makeRequest('/api/referrals/tree', {
			headers: { 'x-api-key': API_READONLY_KEY }
		});
		if (response.status === 401) {
			this.logTest('–û—Å–Ω–æ–≤–Ω–æ–π API —Å readonly –∫–ª—é—á–æ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
		} else {
			this.logTest('–û—Å–Ω–æ–≤–Ω–æ–π API —Å readonly –∫–ª—é—á–æ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'FAIL', `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω: ${response.status}`);
		}
	}

	async runAllTests() {
		console.log('üõ°Ô∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ endpoint —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è...');
		console.log(`Server URL: ${SERVER_URL}`);
		console.log(`Readonly API Key: ${API_READONLY_KEY.substring(0, 8)}...`);

		try {
			await this.testReadonlyWebInterface();
			await this.testReadonlyAPI();
			await this.testMainAPIStillProtected();

			this.printSummary();
		} catch (error) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
		}
	}

	printSummary() {
		console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
		console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passed}`);
		console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failed}`);
		console.log(`üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.total}`);

		const successRate = ((this.testResults.passed / this.testResults.total) * 100).toFixed(1);
		console.log(`üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);

		if (this.testResults.failed === 0) {
			console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã endpoint —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
			console.log('üõ°Ô∏è –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞—â–∏—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å API –∫–ª—é—á–æ–º!');
		} else {
			console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å endpoint —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è!');
		}
	}
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const tester = new ReadonlyEndpointTester();
tester.runAllTests();
