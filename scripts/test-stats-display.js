#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –±–ª–æ–∫–µ stats-bar
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç API endpoints –∏ –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */

import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const API_READONLY_KEY = process.env.API_READONLY_KEY || 'ZDd1/oQLS2BxsFhfA7f012ArXCr0fByy6jlH1JXH7bs=';
const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...\n');

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
 */
async function testReferralsTreeAPI() {
	console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /api/readonly/referrals/tree...');

	try {
		const response = await fetch(`${BASE_URL}/api/readonly/referrals/tree`, {
			headers: {
				'x-api-key': API_READONLY_KEY,
				'Content-Type': 'application/json'
			}
		});

		console.log(`   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);

		if (!response.ok) {
			console.log(`   ‚ùå –û—à–∏–±–∫–∞ API: ${response.status}`);
			return null;
		}

		const data = await response.json();
		console.log(`   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ ${data.data ? data.data.length : 0} –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);

		return data;
	} catch (error) {
		console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
		return null;
	}
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
async function testActivityStatsAPI() {
	console.log('üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /api/readonly/referrals/activity-stats...');

	try {
		const response = await fetch(`${BASE_URL}/api/readonly/referrals/activity-stats`, {
			headers: {
				'x-api-key': API_READONLY_KEY,
				'Content-Type': 'application/json'
			}
		});

		console.log(`   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);

		if (!response.ok) {
			console.log(`   ‚ùå –û—à–∏–±–∫–∞ API: ${response.status}`);
			return null;
		}

		const data = await response.json();
		console.log(`   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, data.data);

		return data;
	} catch (error) {
		console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
		return null;
	}
}

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–µ (–∫–∞–∫ –≤ JavaScript)
 */
function simulateTableStatsCalculation(referralData) {
	console.log('üßÆ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–µ...');

	if (!referralData || referralData.length === 0) {
		console.log('   üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞');
		return { total: 0, active: 0, inactive: 0, levels: 0 };
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ—Ä–µ–≤–æ –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	const flattenTree = (tree, level = 0) => {
		const result = [];
		tree.forEach(item => {
			result.push({ ...item, level });
			if (item.children && item.children.length > 0) {
				result.push(...flattenTree(item.children, level + 1));
			}
		});
		return result;
	};

	const flatData = flattenTree(referralData);
	const totalReferrals = flatData.length;
	const maxLevels = flatData.length > 0 ? Math.max(...flatData.map(item => item.level)) + 1 : 0;

	// –†–∞—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∫–∞–∫ –≤ JavaScript)
	let activeCount = 0;
	let inactiveCount = 0;

	flatData.forEach(item => {
		const hasNickname = item.referal_nickname && item.referal_nickname.trim() !== '';
		const hasChannelActivity = item.channel_activity &&
			item.channel_activity !== '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω' &&
			item.channel_activity !== '‚Äî' &&
			item.channel_activity.trim() !== '';
		const hasChildren = item.totalReferals && item.totalReferals > 0;

		// –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º, –µ—Å–ª–∏:
		// - –ï—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º –ò –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ (–ø–æ–ª–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
		// - –ò–õ–ò –µ—Å—Ç—å –ø–æ—Ç–æ–º–∫–∏ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ)
		if ((hasNickname && hasChannelActivity) || hasChildren) {
			activeCount++;
		} else {
			inactiveCount++;
		}
	});

	const stats = {
		total: totalReferrals,
		active: activeCount,
		inactive: inactiveCount,
		levels: maxLevels
	};

	console.log('   üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
	return stats;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */
async function testWebInterface() {
	console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');

	try {
		const response = await fetch(`${BASE_URL}/network`);
		console.log(`   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);

		if (response.ok) {
			const html = await response.text();
			const hasStatsBar = html.includes('id="statsBar"');
			const hasApiKey = html.includes('api-readonly-key');

			console.log(`   ‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω`);
			console.log(`   üìä –ë–ª–æ–∫ stats-bar: ${hasStatsBar ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
			console.log(`   üîë API –∫–ª—é—á –≤ HTML: ${hasApiKey ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
		} else {
			console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: ${response.status}`);
		}
	} catch (error) {
		console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
	}
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
	console.log(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`);
	console.log(`   Base URL: ${BASE_URL}`);
	console.log(`   API Key: ${API_READONLY_KEY.substring(0, 10)}...`);
	console.log('');

	// –¢–µ—Å—Ç 1: API –¥–µ—Ä–µ–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
	const treeData = await testReferralsTreeAPI();
	console.log('');

	// –¢–µ—Å—Ç 2: API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
	const activityData = await testActivityStatsAPI();
	console.log('');

	// –¢–µ—Å—Ç 3: –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ
	if (treeData && treeData.data) {
		const calculatedStats = simulateTableStatsCalculation(treeData.data);
		console.log('');

		// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
		if (activityData && activityData.data) {
			console.log('üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:');
			console.log(`   API –∞–∫—Ç–∏–≤–Ω—ã–µ: ${activityData.data.active}, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ: ${calculatedStats.active}`);
			console.log(`   API –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: ${activityData.data.inactive}, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ: ${calculatedStats.inactive}`);
		}
	}
	console.log('');

	// –¢–µ—Å—Ç 4: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	await testWebInterface();
	console.log('');

	console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
	console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
	process.exit(1);
});
