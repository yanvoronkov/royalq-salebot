#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª—è–µ–º—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
 */

import https from 'https';
import http from 'http';

const BASE_URL = 'https://projects.inetskills.ru';
const UPDATE_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const isHttps = url.startsWith('https://');
        const client = isHttps ? https : http;
        
        const requestOptions = {
            method: options.method || 'GET',
            headers: {
                'User-Agent': 'RealtimeMonitor/1.0',
                ...options.headers
            },
            timeout: 10000
        };

        const req = client.request(url, requestOptions, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(data);
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        data: jsonData
                    });
                } catch (error) {
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        data: data
                    });
                }
            });
        });

        req.on('error', reject);
        req.on('timeout', () => {
            req.destroy();
            reject(new Error('Request timeout'));
        });

        if (options.body) {
            req.write(options.body);
        }
        
        req.end();
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function getServerStats() {
    try {
        const response = await makeRequest(`${BASE_URL}/stats`);
        
        if (response.statusCode === 200) {
            return response.data;
        } else {
            throw new Error(`HTTP ${response.statusCode}`);
        }
    } catch (error) {
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —ç–∫—Ä–∞–Ω–∞
function clearScreen() {
    process.stdout.write('\x1B[2J\x1B[0f');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function displayStats(stats, iteration) {
    clearScreen();
    
    console.log('üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –ù–ê–ì–†–£–ó–ö–ò –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò');
    console.log('==========================================');
    console.log(`üåê –°–µ—Ä–≤–µ—Ä: ${BASE_URL}`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ #${iteration} (–∫–∞–∂–¥—ã–µ ${UPDATE_INTERVAL/1000} —Å–µ–∫)`);
    console.log('');
    
    if (!stats || !stats.data) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞');
        console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –∏ endpoint /stats');
        return;
    }
    
    const { stats: serverStats, prediction } = stats.data;
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
    console.log('-------------------');
    console.log(`üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${serverStats.total}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${serverStats.errors}`);
    console.log(`‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${serverStats.avgResponseTime}ms`);
    
    // –¢–æ–ø endpoints
    console.log('\nüî• –¢–û–ü ENDPOINTS');
    console.log('----------------');
    serverStats.topEndpoints.slice(0, 5).forEach(([endpoint, data], index) => {
        const status = data.errors > 0 ? '‚ö†Ô∏è' : '‚úÖ';
        console.log(`${status} ${index + 1}. ${endpoint}`);
        console.log(`     –ó–∞–ø—Ä–æ—Å–æ–≤: ${data.count} | –í—Ä–µ–º—è: ${data.avgTime}ms | –û—à–∏–±–æ–∫: ${data.errors}`);
    });
    
    // –¢–æ–ø IP
    console.log('\nüåê –¢–û–ü IP –ê–î–†–ï–°–ê');
    console.log('----------------');
    serverStats.topIPs.slice(0, 5).forEach(([ip, data], index) => {
        const status = data.count > 100 ? 'üö®' : data.count > 50 ? '‚ö†Ô∏è' : '‚úÖ';
        console.log(`${status} ${index + 1}. ${ip}: ${data.count} –∑–∞–ø—Ä–æ—Å–æ–≤`);
    });
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤)
    console.log('\n‚è∞ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤)');
    console.log('------------------------------------------');
    const currentHour = new Date().getHours();
    const recentHours = [];
    
    for (let i = 5; i >= 0; i--) {
        const hour = (currentHour - i + 24) % 24;
        const count = serverStats.hourlyDistribution.find(h => h[0] === hour)?.[1] || 0;
        recentHours.push([hour, count]);
    }
    
    recentHours.forEach(([hour, count]) => {
        const bar = '‚ñà'.repeat(Math.min(count / 20, 30));
        const timeLabel = `${hour.toString().padStart(2, '0')}:00`;
        const isCurrent = hour === currentHour ? 'üëà' : '  ';
        console.log(`${timeLabel} ${bar} ${count} ${isCurrent}`);
    });
    
    // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
    console.log('\nüîÆ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –ù–ê–ì–†–£–ó–ö–ò');
    console.log('------------------------');
    console.log(`üìä –¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${prediction.currentLoad} –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å`);
    console.log(`üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å: ${prediction.predictedNextHour} –∑–∞–ø—Ä–æ—Å–æ–≤`);
    console.log(`üî• –ü–∏–∫–æ–≤—ã–π —á–∞—Å: ${prediction.peakHour}:00 (${prediction.peakRequests} –∑–∞–ø—Ä–æ—Å–æ–≤)`);
    console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${prediction.recommendation}`);
    
    // –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüéØ –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´');
    console.log('-----------------');
    const systemStatus = getSystemStatus(serverStats, prediction);
    console.log(systemStatus);
    
    console.log('\nüí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
function getSystemStatus(stats, prediction) {
    const issues = [];
    
    if (stats.avgResponseTime > 2000) {
        issues.push('üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã');
    }
    
    if (stats.errors / stats.total > 0.05) {
        issues.push('‚ùå –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫');
    }
    
    if (stats.topIPs[0]?.count > 500) {
        issues.push('üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
    }
    
    if (prediction.predictedNextHour > 1000) {
        issues.push('üìà –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞');
    }
    
    if (issues.length === 0) {
        return '‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ';
    } else {
        return `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: ${issues.join(', ')}`;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function startMonitoring() {
    let iteration = 0;
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...');
    console.log('   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞\n');
    
    // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const stats = await getServerStats();
    displayStats(stats, ++iteration);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const interval = setInterval(async () => {
        const stats = await getServerStats();
        displayStats(stats, ++iteration);
    }, UPDATE_INTERVAL);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
        clearInterval(interval);
        clearScreen();
        console.log('üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
    startMonitoring().catch(error => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

export { startMonitoring };
