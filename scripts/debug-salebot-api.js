#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å Salebot API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—á–µ–º—É Salebot –ø–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫—É "referal_id is required"
 */

import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

const API_SECRET_KEY = process.env.API_SECRET_KEY || 'YdbX9WekeVLzRDbwrgeR+90W2rFE0Q60KzBwg7aP/P0=';
const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å Salebot API...\n');

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç POST –∑–∞–ø—Ä–æ—Å –∫–∞–∫ Salebot
 */
async function testSalebotRequest() {
    console.log('üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ Salebot...');
    
    const testData = {
        "referal_id": "1234",
        "referer_id": "214879489",
        "referal_nickname": "test_user",
        "referer_nickname": "test_referer",
        "referal_name": "Test User",
        "referral_link_url": "https://t.me/test",
        "personal_channel_link": "",
        "utm": ""
    };

    try {
        const response = await fetch(`${BASE_URL}/api/referals/`, {
            method: 'POST',
            headers: {
                'x-api-key': API_SECRET_KEY,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testData)
        });

        console.log(`   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
        
        const responseText = await response.text();
        console.log(`   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${responseText}`);

        if (!response.ok) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ API: ${response.status}`);
            return false;
        }

        console.log(`   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        return true;
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç POST –∑–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º —Ç–µ–ª–æ–º
 */
async function testEmptyBodyRequest() {
    console.log('üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—É—Å—Ç—ã–º —Ç–µ–ª–æ–º...');
    
    try {
        const response = await fetch(`${BASE_URL}/api/referals/`, {
            method: 'POST',
            headers: {
                'x-api-key': API_SECRET_KEY,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({})
        });

        console.log(`   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
        
        const responseText = await response.text();
        console.log(`   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${responseText}`);

        return responseText;
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
        return null;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç POST –∑–∞–ø—Ä–æ—Å –±–µ–∑ referal_id
 */
async function testMissingReferalIdRequest() {
    console.log('üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ referal_id...');
    
    const testData = {
        "referer_id": "214879489",
        "referal_nickname": "test_user",
        "referer_nickname": "test_referer",
        "referal_name": "Test User"
    };

    try {
        const response = await fetch(`${BASE_URL}/api/referals/`, {
            method: 'POST',
            headers: {
                'x-api-key': API_SECRET_KEY,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testData)
        });

        console.log(`   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
        
        const responseText = await response.text();
        console.log(`   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${responseText}`);

        return responseText;
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
        return null;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ Content-Type –∑–∞–≥–æ–ª–æ–≤–∫–∏
 */
async function testDifferentContentTypes() {
    console.log('üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö Content-Type –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...');
    
    const testData = {
        "referal_id": "1234",
        "referer_id": "214879489",
        "referal_nickname": "test_user"
    };

    const contentTypes = [
        'application/json',
        'application/x-www-form-urlencoded',
        'text/plain'
    ];

    for (const contentType of contentTypes) {
        console.log(`   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Content-Type: ${contentType}`);
        
        try {
            let body;
            if (contentType === 'application/json') {
                body = JSON.stringify(testData);
            } else if (contentType === 'application/x-www-form-urlencoded') {
                body = new URLSearchParams(testData).toString();
            } else {
                body = JSON.stringify(testData);
            }

            const response = await fetch(`${BASE_URL}/api/referals/`, {
                method: 'POST',
                headers: {
                    'x-api-key': API_SECRET_KEY,
                    'Content-Type': contentType
                },
                body: body
            });

            console.log(`     –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
            
            const responseText = await response.text();
            console.log(`     –û—Ç–≤–µ—Ç: ${responseText.substring(0, 100)}...`);
            
        } catch (error) {
            console.log(`     ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
 */
async function testMiddlewareParsing() {
    console.log('üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ middleware...');
    
    // –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON
    try {
        const response = await fetch(`${BASE_URL}/api/referals/`, {
            method: 'POST',
            headers: {
                'x-api-key': API_SECRET_KEY,
                'Content-Type': 'application/json'
            },
            body: '{"referal_id": "1234", "referer_id": "214879489"' // –ù–µ–ø–æ–ª–Ω—ã–π JSON
        });

        console.log(`   –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON - –°—Ç–∞—Ç—É—Å: ${response.status}`);
        const responseText = await response.text();
        console.log(`   –û—Ç–≤–µ—Ç: ${responseText}`);
        
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */
async function runDiagnostics() {
    console.log(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`);
    console.log(`   Base URL: ${BASE_URL}`);
    console.log(`   API Key: ${API_SECRET_KEY.substring(0, 10)}...`);
    console.log('');

    // –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    await testSalebotRequest();
    console.log('');

    // –¢–µ—Å—Ç 2: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ
    await testEmptyBodyRequest();
    console.log('');

    // –¢–µ—Å—Ç 3: –ë–µ–∑ referal_id
    await testMissingReferalIdRequest();
    console.log('');

    // –¢–µ—Å—Ç 4: –†–∞–∑–Ω—ã–µ Content-Type
    await testDifferentContentTypes();
    console.log('');

    // –¢–µ—Å—Ç 5: –ü–∞—Ä—Å–∏–Ω–≥ middleware
    await testMiddlewareParsing();
    console.log('');

    console.log('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('');
    console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
    console.log('1. Salebot –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON');
    console.log('2. Salebot –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type');
    console.log('3. Middleware –Ω–µ –ø–∞—Ä—Å–∏—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞');
    console.log('4. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Salebot –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤ JSON');
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
runDiagnostics().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});
