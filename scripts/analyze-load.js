#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
 */

import https from 'https';
import http from 'http';

const BASE_URL = 'https://projects.inetskills.ru';
const API_READONLY_KEY = 'YdbX9WekeVLzRDbwrgeR+90W2rFE0Q60KzBwg7aP/P0='; // Readonly API –∫–ª—é—á

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const isHttps = url.startsWith('https://');
        const client = isHttps ? https : http;
        
        const requestOptions = {
            method: options.method || 'GET',
            headers: {
                'User-Agent': 'LoadAnalyzer/1.0',
                ...options.headers
            },
            timeout: 10000
        };

        const req = client.request(url, requestOptions, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(data);
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        data: jsonData
                    });
                } catch (error) {
                    resolve({
                        statusCode: res.statusCode,
                        headers: res.headers,
                        data: data
                    });
                }
            });
        });

        req.on('error', reject);
        req.on('timeout', () => {
            req.destroy();
            reject(new Error('Request timeout'));
        });

        if (options.body) {
            req.write(options.body);
        }
        
        req.end();
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function getServerStats() {
    try {
        const response = await makeRequest(`${BASE_URL}/stats`);
        
        if (response.statusCode === 200) {
            return response.data;
        } else {
            throw new Error(`HTTP ${response.statusCode}: ${response.data}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
async function testLoad() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏...');
    
    const endpoints = [
        { path: '/health', needsAuth: false },
        { path: '/network', needsAuth: false },
        { path: '/api/referrals/tree', needsAuth: true },
        { path: '/api/referrals/activity-stats', needsAuth: true }
    ];
    
    const results = [];
    
    for (const endpoint of endpoints) {
        const startTime = Date.now();
        try {
            const options = endpoint.needsAuth ? {
                headers: { 'x-api-key': API_READONLY_KEY }
            } : {};
            
            const response = await makeRequest(`${BASE_URL}${endpoint.path}`, options);
            const responseTime = Date.now() - startTime;
            
            results.push({
                endpoint: endpoint.path,
                status: response.statusCode,
                responseTime,
                success: response.statusCode < 400
            });
            
            console.log(`‚úÖ ${endpoint.path}: ${response.statusCode} (${responseTime}ms)`);
        } catch (error) {
            const responseTime = Date.now() - startTime;
            results.push({
                endpoint: endpoint.path,
                status: 'ERROR',
                responseTime,
                success: false,
                error: error.message
            });
            
            console.log(`‚ùå ${endpoint.path}: ERROR (${responseTime}ms) - ${error.message}`);
        }
    }
    
    return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function analyzeResults(stats, loadTest) {
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –ù–ê–ì–†–£–ó–ö–ò');
    console.log('==================');
    
    if (stats && stats.data) {
        const { stats: serverStats, prediction } = stats.data;
        
        console.log(`üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${serverStats.total}`);
        console.log(`   –û—à–∏–±–æ–∫: ${serverStats.errors}`);
        console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${serverStats.avgResponseTime}ms`);
        
        console.log(`\nüî• –¢–æ–ø endpoints:`);
        serverStats.topEndpoints.slice(0, 5).forEach(([endpoint, data], index) => {
            console.log(`   ${index + 1}. ${endpoint}: ${data.count} –∑–∞–ø—Ä–æ—Å–æ–≤ (${data.avgTime}ms avg)`);
        });
        
        console.log(`\nüåê –¢–æ–ø IP –∞–¥—Ä–µ—Å–∞:`);
        serverStats.topIPs.slice(0, 5).forEach(([ip, data], index) => {
            console.log(`   ${index + 1}. ${ip}: ${data.count} –∑–∞–ø—Ä–æ—Å–æ–≤`);
        });
        
        console.log(`\n‚è∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º:`);
        serverStats.hourlyDistribution.forEach(([hour, count]) => {
            const bar = '‚ñà'.repeat(Math.min(count / 10, 20));
            console.log(`   ${hour.toString().padStart(2, '0')}:00 ${bar} ${count}`);
        });
        
        console.log(`\nüîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏:`);
        console.log(`   –¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${prediction.currentLoad} –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å`);
        console.log(`   –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å: ${prediction.predictedNextHour} –∑–∞–ø—Ä–æ—Å–æ–≤`);
        console.log(`   –ü–∏–∫–æ–≤—ã–π —á–∞—Å: ${prediction.peakHour}:00 (${prediction.peakRequests} –∑–∞–ø—Ä–æ—Å–æ–≤)`);
        console.log(`   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${prediction.recommendation}`);
    }
    
    console.log(`\nüß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
    const avgResponseTime = loadTest.reduce((sum, test) => sum + test.responseTime, 0) / loadTest.length;
    const successRate = (loadTest.filter(test => test.success).length / loadTest.length) * 100;
    
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${Math.round(avgResponseTime)}ms`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round(successRate)}%`);
    
    loadTest.forEach(test => {
        const status = test.success ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} ${test.endpoint}: ${test.responseTime}ms`);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
function getOptimizationRecommendations(stats, loadTest) {
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò');
    console.log('================================');
    
    const recommendations = [];
    
    if (stats && stats.data) {
        const { stats: serverStats } = stats.data;
        
        // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
        if (serverStats.avgResponseTime > 1000) {
            recommendations.push('üêå –í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.');
        }
        
        // –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
        const errorRate = (serverStats.errors / serverStats.total) * 100;
        if (errorRate > 5) {
            recommendations.push('‚ùå –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∏ –ª–æ–≥–∏.');
        }
        
        // –ê–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å –æ–¥–Ω–æ–≥–æ IP
        if (serverStats.topIPs[0]?.count > 100) {
            recommendations.push('üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –æ–¥–Ω–æ–≥–æ IP. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ rate limiting –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É.');
        }
        
        // –ê–Ω–∞–ª–∏–∑ –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        const peakHour = serverStats.hourlyDistribution.reduce((max, [hour, count]) => 
            count > max.count ? { hour, count } : max, { hour: 0, count: 0 });
        
        if (peakHour.count > 1000) {
            recommendations.push('üìà –í—ã—Å–æ–∫–∞—è –ø–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ.');
        }
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const avgResponseTime = loadTest.reduce((sum, test) => sum + test.responseTime, 0) / loadTest.length;
    if (avgResponseTime > 2000) {
        recommendations.push('‚è±Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ—Å—Ç–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.');
    }
    
    const slowEndpoints = loadTest.filter(test => test.responseTime > 3000);
    if (slowEndpoints.length > 0) {
        recommendations.push(`üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ endpoints: ${slowEndpoints.map(e => e.endpoint).join(', ')}`);
    }
    
    if (recommendations.length === 0) {
        recommendations.push('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.');
    }
    
    recommendations.forEach((rec, index) => {
        console.log(`   ${index + 1}. ${rec}`);
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üîç –ê–ù–ê–õ–ò–ó –ù–ê–ì–†–£–ó–ö–ò –°–ï–†–í–ï–†–ê');
    console.log('===========================');
    console.log(`üåê –°–µ—Ä–≤–µ—Ä: ${BASE_URL}`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
    console.log('');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    const stats = await getServerStats();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
    const loadTest = await testLoad();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analyzeResults(stats, loadTest);
    
    // –î–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    getOptimizationRecommendations(stats, loadTest);
    
    console.log('\nüéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch(error => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

export { main as analyzeLoad };
