#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

import http from 'http';
import dotenv from 'dotenv';

dotenv.config();

const API_BASE_URL = 'http://localhost:3000';
const API_SECRET_KEY = process.env.API_SECRET_KEY || '06ediHycd1Vi1MY4l/DuV5FKrY5ocu8l0ru3Q1zXq5E=';

class SimpleSecurityTester {
    constructor() {
        this.testResults = {
            passed: 0,
            failed: 0,
            total: 0
        };
    }

    logTest(testName, status, message = '') {
        const statusIcon = status === 'PASS' ? '‚úÖ' : '‚ùå';
        console.log(`${statusIcon} ${testName}: ${status} ${message}`);
        
        this.testResults.total++;
        if (status === 'PASS') {
            this.testResults.passed++;
        } else {
            this.testResults.failed++;
        }
    }

    async makeRequest(path, options = {}) {
        return new Promise((resolve) => {
            const requestOptions = {
                hostname: 'localhost',
                port: 3000,
                path: path,
                method: options.method || 'GET',
                headers: {
                    'User-Agent': 'Security-Tester/1.0',
                    ...options.headers
                },
                timeout: 5000
            };
            
            const req = http.request(requestOptions, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                    data += chunk;
                });
                
                res.on('end', () => {
                    resolve({
                        status: res.statusCode,
                        headers: res.headers,
                        data: data
                    });
                });
            });
            
            req.on('error', (error) => {
                resolve({
                    status: 0,
                    error: error.message,
                    data: null
                });
            });
            
            req.on('timeout', () => {
                req.destroy();
                resolve({
                    status: 0,
                    error: 'Request timeout',
                    data: null
                });
            });
            
            if (options.body) {
                req.write(options.body);
            }
            
            req.end();
        });
    }

    async testHealthCheck() {
        console.log('\nüè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...');
        
        const response = await this.makeRequest('/health');
        if (response.status === 200) {
            this.logTest('Health check', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
        } else {
            this.logTest('Health check', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
        }
    }

    async testWebInterface() {
        console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
        
        const response = await this.makeRequest('/network');
        if (response.status === 200) {
            this.logTest('–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
        } else {
            this.logTest('–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
        }
    }

    async testUnauthorizedAPI() {
        console.log('\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API...');
        
        const response = await this.makeRequest('/api/referrals/tree');
        if (response.status === 401) {
            this.logTest('API –±–µ–∑ –∫–ª—é—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
        } else {
            this.logTest('API –±–µ–∑ –∫–ª—é—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'FAIL', `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω: ${response.status}`);
        }
    }

    async testAuthorizedAPI() {
        console.log('\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API...');
        
        const response = await this.makeRequest('/api/referrals/tree', {
            headers: { 'x-api-key': API_SECRET_KEY }
        });
        if (response.status === 200) {
            this.logTest('API —Å –∫–ª—é—á–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
        } else {
            this.logTest('API —Å –∫–ª—é—á–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
        }
    }

    async testWrongAPIKey() {
        console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ API –∫–ª—é—á–∞...');
        
        const response = await this.makeRequest('/api/referrals/tree', {
            headers: { 'x-api-key': 'wrong-key' }
        });
        if (response.status === 401) {
            this.logTest('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
        } else {
            this.logTest('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'FAIL', `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω: ${response.status}`);
        }
    }

    async runAllTests() {
        console.log('üõ°Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
        console.log(`API Base URL: ${API_BASE_URL}`);
        console.log(`API Secret Key: ${API_SECRET_KEY.substring(0, 8)}...`);
        
        try {
            await this.testHealthCheck();
            await this.testWebInterface();
            await this.testUnauthorizedAPI();
            await this.testAuthorizedAPI();
            await this.testWrongAPIKey();
            
            this.printSummary();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
        }
    }

    printSummary() {
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failed}`);
        console.log(`üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.total}`);
        
        const successRate = ((this.testResults.passed / this.testResults.total) * 100).toFixed(1);
        console.log(`üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
        
        if (this.testResults.failed === 0) {
            console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é API!');
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const tester = new SimpleSecurityTester();
tester.runAllTests();
