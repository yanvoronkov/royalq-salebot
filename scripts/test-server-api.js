#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∑–∞—â–∏—Ç—ã –Ω–∞ production —Å–µ—Ä–≤–µ—Ä–µ
 */

import https from 'https';
import http from 'http';
import dotenv from 'dotenv';

dotenv.config();

const SERVER_URL = process.env.SERVER_URL || 'https://projects.inetskills.ru';
const API_SECRET_KEY = process.env.API_SECRET_KEY || '06ediHycd1Vi1MY4l/DuV5FKrY5ocu8l0ru3Q1zXq5E=';

class ServerSecurityTester {
	constructor() {
		this.testResults = {
			passed: 0,
			failed: 0,
			total: 0
		};
	}

	logTest(testName, status, message = '') {
		const statusIcon = status === 'PASS' ? '‚úÖ' : '‚ùå';
		console.log(`${statusIcon} ${testName}: ${status} ${message}`);

		this.testResults.total++;
		if (status === 'PASS') {
			this.testResults.passed++;
		} else {
			this.testResults.failed++;
		}
	}

	async makeRequest(path, options = {}) {
		return new Promise((resolve) => {
			const url = new URL(path, SERVER_URL);
			const isHttps = url.protocol === 'https:';
			const client = isHttps ? https : http;

			const requestOptions = {
				hostname: url.hostname,
				port: url.port || (isHttps ? 443 : 80),
				path: url.pathname + url.search,
				method: options.method || 'GET',
				headers: {
					'User-Agent': 'Server-Security-Tester/1.0',
					...options.headers
				},
				timeout: 10000
			};

			const req = client.request(requestOptions, (res) => {
				let data = '';

				res.on('data', (chunk) => {
					data += chunk;
				});

				res.on('end', () => {
					let jsonData;
					try {
						jsonData = JSON.parse(data);
					} catch (e) {
						jsonData = { raw: data };
					}

					resolve({
						status: res.statusCode,
						headers: res.headers,
						data: jsonData
					});
				});
			});

			req.on('error', (error) => {
				resolve({
					status: 0,
					error: error.message,
					data: null
				});
			});

			req.on('timeout', () => {
				req.destroy();
				resolve({
					status: 0,
					error: 'Request timeout',
					data: null
				});
			});

			if (options.body) {
				req.write(options.body);
			}

			req.end();
		});
	}

	async testHealthCheck() {
		console.log('\nüè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...');

		const response = await this.makeRequest('/health');
		if (response.status === 200) {
			this.logTest('Health check', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
		} else {
			this.logTest('Health check', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
		}
	}

	async testWebInterface() {
		console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');

		const response = await this.makeRequest('/network');
		if (response.status === 200) {
			this.logTest('–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
		} else {
			this.logTest('–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
		}
	}

	async testUnauthorizedAPI() {
		console.log('\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API...');

		const response = await this.makeRequest('/api/referrals/tree');
		if (response.status === 401) {
			this.logTest('API –±–µ–∑ –∫–ª—é—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
		} else {
			this.logTest('API –±–µ–∑ –∫–ª—é—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'FAIL', `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω: ${response.status}`);
		}
	}

	async testAuthorizedAPI() {
		console.log('\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API...');

		const response = await this.makeRequest('/api/referrals/tree', {
			headers: { 'x-api-key': API_SECRET_KEY }
		});
		if (response.status === 200) {
			this.logTest('API —Å –∫–ª—é—á–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
		} else {
			this.logTest('API —Å –∫–ª—é—á–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
		}
	}

	async testWrongAPIKey() {
		console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ API –∫–ª—é—á–∞...');

		const response = await this.makeRequest('/api/referrals/tree', {
			headers: { 'x-api-key': 'wrong-key' }
		});
		if (response.status === 401) {
			this.logTest('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response.status}`);
		} else {
			this.logTest('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'FAIL', `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω: ${response.status}`);
		}
	}

	async testWriteOperations() {
		console.log('\n‚úèÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏...');

		// POST –±–µ–∑ –∫–ª—é—á–∞
		const response1 = await this.makeRequest('/api/referals', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({
				referalId: 'test-user-123',
				referalName: 'Test User',
				referalPhone: '+1234567890'
			})
		});
		if (response1.status === 401) {
			this.logTest('POST –±–µ–∑ –∫–ª—é—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response1.status}`);
		} else {
			this.logTest('POST –±–µ–∑ –∫–ª—é—á–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', 'FAIL', `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω: ${response1.status}`);
		}

		// POST —Å –∫–ª—é—á–æ–º
		const response2 = await this.makeRequest('/api/referals', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'x-api-key': API_SECRET_KEY
			},
			body: JSON.stringify({
				referalId: 'test-user-456',
				referalName: 'Test User 2',
				referalPhone: '+1234567891'
			})
		});
		if (response2.status === 200 || response2.status === 201) {
			this.logTest('POST —Å –∫–ª—é—á–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç', 'PASS', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
		} else {
			this.logTest('POST —Å –∫–ª—é—á–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç', 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
		}
	}

	async testRateLimiting() {
		console.log('\n‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...');

		const requests = [];
		const maxRequests = 10;

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
		for (let i = 0; i < maxRequests; i++) {
			requests.push(
				this.makeRequest('/api/referrals/tree', {
					headers: { 'x-api-key': API_SECRET_KEY }
				})
			);
		}

		const responses = await Promise.all(requests);
		const successCount = responses.filter(r => r.status === 200).length;
		const rateLimitedCount = responses.filter(r => r.status === 429).length;

		if (successCount > 0) {
			this.logTest('Rate limiting - —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', 'PASS', `–£—Å–ø–µ—à–Ω–æ: ${successCount}/${maxRequests}`);
		} else {
			this.logTest('Rate limiting - —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', 'FAIL', '–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
		}

		if (rateLimitedCount > 0) {
			this.logTest('Rate limiting - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ', 'PASS', `–û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ: ${rateLimitedCount}/${maxRequests}`);
		} else {
			this.logTest('Rate limiting - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ', 'INFO', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)');
		}
	}

	async testSpecificEndpoints() {
		console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö endpoints...');

		const endpoints = [
			'/api/referrals/activity-stats',
			'/api/referrals/search',
			'/api/referrals/filter',
			'/api/payments/user/test123'
		];

		for (const endpoint of endpoints) {
			// –ë–µ–∑ –∫–ª—é—á–∞
			const response1 = await this.makeRequest(endpoint);
			if (response1.status === 401) {
				this.logTest(`${endpoint} –±–µ–∑ –∫–ª—é—á–∞`, 'PASS', `–°—Ç–∞—Ç—É—Å: ${response1.status}`);
			} else {
				this.logTest(`${endpoint} –±–µ–∑ –∫–ª—é—á–∞`, 'FAIL', `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 401, –ø–æ–ª—É—á–µ–Ω: ${response1.status}`);
			}

			// –° –∫–ª—é—á–æ–º
			const response2 = await this.makeRequest(endpoint, {
				headers: { 'x-api-key': API_SECRET_KEY }
			});
			if (response2.status === 200 || response2.status === 404) { // 404 –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
				this.logTest(`${endpoint} —Å –∫–ª—é—á–æ–º`, 'PASS', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
			} else {
				this.logTest(`${endpoint} —Å –∫–ª—é—á–æ–º`, 'FAIL', `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
			}
		}
	}

	async runAllTests() {
		console.log('üõ°Ô∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
		console.log(`Server URL: ${SERVER_URL}`);
		console.log(`API Secret Key: ${API_SECRET_KEY.substring(0, 8)}...`);

		try {
			await this.testHealthCheck();
			await this.testWebInterface();
			await this.testUnauthorizedAPI();
			await this.testAuthorizedAPI();
			await this.testWrongAPIKey();
			await this.testWriteOperations();
			await this.testRateLimiting();
			await this.testSpecificEndpoints();

			this.printSummary();
		} catch (error) {
			console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
		}
	}

	printSummary() {
		console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
		console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passed}`);
		console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failed}`);
		console.log(`üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.testResults.total}`);

		const successRate = ((this.testResults.passed / this.testResults.total) * 100).toFixed(1);
		console.log(`üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);

		if (this.testResults.failed === 0) {
			console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
			console.log('üõ°Ô∏è API –∑–∞—â–∏—â–µ–Ω –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!');
		} else {
			console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é API!');
			console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.');
		}

		console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
		console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞: docker-compose logs app');
		console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: docker-compose exec app env | grep API');
		console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: docker-compose ps');
		console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç API_SECRET_KEY');
	}
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const tester = new ServerSecurityTester();
tester.runAllTests();
